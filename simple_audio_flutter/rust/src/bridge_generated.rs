#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_new__static_method__PlayerWrapper_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, PlayerWrapper, _>(
        WrapInfo {
            debug_name: "new__static_method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::new()),
    )
}
fn wire_dispose__static_method__PlayerWrapper_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "dispose__static_method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::dispose()),
    )
}
fn wire_playback_started_stream__static_method__PlayerWrapper_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "playback_started_stream__static_method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(PlayerWrapper::playback_started_stream(
                    task_callback.stream_sink::<_, chrono::Duration>(),
                ))
            }
        },
    )
}
fn wire_playback_state_stream__static_method__PlayerWrapper_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "playback_state_stream__static_method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(PlayerWrapper::playback_state_stream(
                    task_callback.stream_sink::<_, PlaybackState>(),
                ))
            }
        },
    )
}
fn wire_progress_state_stream__static_method__PlayerWrapper_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "progress_state_stream__static_method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(PlayerWrapper::progress_state_stream(
                    task_callback.stream_sink::<_, ProgressState>(),
                ))
            }
        },
    )
}
fn wire_error_stream__static_method__PlayerWrapper_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "error_stream__static_method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(PlayerWrapper::error_stream(
                    task_callback.stream_sink::<_, Error>(),
                ))
            }
        },
    )
}
fn wire_playback_state__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, PlaybackState, _>(
        WrapInfo {
            debug_name: "playback_state__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::playback_state(&api_that))
        },
    )
}
fn wire_progress__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ProgressState, _>(
        WrapInfo {
            debug_name: "progress__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::progress(&api_that))
        },
    )
}
fn wire_is_preloaded__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "is_preloaded__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::is_preloaded(&api_that))
        },
    )
}
fn wire_is_looping__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "is_looping__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::is_looping(&api_that))
        },
    )
}
fn wire_is_normalizing__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "is_normalizing__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::is_normalizing(&api_that))
        },
    )
}
fn wire_volume__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f32, _>(
        WrapInfo {
            debug_name: "volume__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::volume(&api_that))
        },
    )
}
fn wire_open__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
    path: impl Wire2Api<String> + UnwindSafe,
    autoplay: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "open__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_path = path.wire2api();
            let api_autoplay = autoplay.wire2api();
            move |task_callback| PlayerWrapper::open(&api_that, api_path, api_autoplay)
        },
    )
}
fn wire_preload__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
    path: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "preload__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_path = path.wire2api();
            move |task_callback| PlayerWrapper::preload(&api_that, api_path)
        },
    )
}
fn wire_play_preload__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "play_preload__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::play_preload(&api_that))
        },
    )
}
fn wire_clear_preload__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "clear_preload__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::clear_preload(&api_that))
        },
    )
}
fn wire_play__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "play__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::play(&api_that))
        },
    )
}
fn wire_pause__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "pause__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::pause(&api_that))
        },
    )
}
fn wire_stop__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "stop__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::stop(&api_that))
        },
    )
}
fn wire_loop_playback__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
    should_loop: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "loop_playback__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_should_loop = should_loop.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(PlayerWrapper::loop_playback(&api_that, api_should_loop))
            }
        },
    )
}
fn wire_set_volume__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
    volume: impl Wire2Api<f32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "set_volume__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_volume = volume.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(PlayerWrapper::set_volume(&api_that, api_volume))
            }
        },
    )
}
fn wire_seek__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
    position: impl Wire2Api<chrono::Duration> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "seek__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_position = position.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PlayerWrapper::seek(&api_that, api_position))
        },
    )
}
fn wire_normalize_volume__method__PlayerWrapper_impl(
    port_: MessagePort,
    that: impl Wire2Api<PlayerWrapper> + UnwindSafe,
    should_normalize: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "normalize_volume__method__PlayerWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_should_normalize = should_normalize.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(PlayerWrapper::normalize_volume(
                    &api_that,
                    api_should_normalize,
                ))
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for Error {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::NetworkStream(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Decode(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::Open(field0) => vec![2.into_dart(), field0.into_into_dart().into_dart()],
            Self::Preload(field0) => vec![3.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Error {}
impl rust2dart::IntoIntoDart<Error> for Error {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PlaybackState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Play => 0,
            Self::Pause => 1,
            Self::Done => 2,
            Self::Stop => 3,
            Self::PreloadPlayed => 4,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PlaybackState {}
impl rust2dart::IntoIntoDart<PlaybackState> for PlaybackState {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PlayerWrapper {
    fn into_dart(self) -> support::DartAbi {
        vec![self.internal.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PlayerWrapper {}
impl rust2dart::IntoIntoDart<PlayerWrapper> for PlayerWrapper {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for ProgressState {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.position.into_into_dart().into_dart(),
            self.duration.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ProgressState {}
impl rust2dart::IntoIntoDart<ProgressState> for ProgressState {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
